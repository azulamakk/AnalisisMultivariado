spotify <- read.csv("dataset.csv")
source('Librerias y Funciones.R')
library(dplyr)
library(smacof)

set.seed(13)

data <- spotify[sample(nrow(spotify), 100), ] %>%
  select('popularity', 'energy', 'danceability', 'time_signature', 'mode')

p <- ncol(data)
w <- rep(1,p)

data$time_signature <- as.factor(data$time_signature)
data$mode <- as.factor(data$time_signature)

# En esta versión modificada, para variables continuas, 
# se utiliza directamente la distancia euclidiana normalizada 
# por el rango de la variable, eliminando la conversión a distancia Gower. 
# Solo se aplica la distancia Gower para las variables categóricas, 
# donde se compara la igualdad entre categorías.

distancia_gower_modificada <- function(data, w){
  n <- nrow(data)
  p <- ncol(data)
  dist <- matrix(0, n, n) # Creo la matriz vacia
  ranges <- sapply(data, function(x) if (!is.factor(x)) diff(range(x)) else NA)
  
  for(i in 1:n){
    for(j in 1:n){ # Porque quiero crear la matriz n x n que compara las distancias entre todos
      a <- 0
      for(k in 1:p){ # Porque tengo que ir por cada variable de la tabla
        if (is.factor(data[, k])){ # Si la variable es categórica
          s <- as.numeric((data[i, k] == data[j, k]))
        } else { # Si la variable es numérica
          s <- sqrt(sum((data[i, k] - data[j, k])^2))  # Utiliza la distancia euclidiana para variables numéricas
        }
        a <- a + w[k] * s
      }
      dist[i, j] = a / sum(w) # Cada elemento de la matriz es Dij
    }
  }
  
  return(dist)
}

delta <- distancia_gower_modificada(data, w=rep(1,p))
mds <- cmdscale(as.dist(delta))
plot(mds, pch = 20, col = 'black', cex = 1.5, xlim = c(-0.6, 0.6), ylim = c(-0.6, 0.6))
text(mds,rownames(data))

mdsConPeso <- cmdscale(as.dist(distancia_gower_modificada(data, w=c(10,1,1,1,1))))
deltaConPeso <- distancia_gower_modificada(data, w=c(10,1,1,1,1))
plot(mdsConPeso, pch = 20, col = 'firebrick', cex = 1.5, xlim = c(-0.6, 0.6), ylim = c(-0.6, 0.6))
text(mdsConPeso,rownames(data),col='firebrick') #Los colores marcan los pesos cambiados

plot3d(cmdscale(as.dist(delta),k=3),
       cube=FALSE)

plot3d(cmdscale(as.dist(deltaConPeso),k=3),
       cube=FALSE)

# MDS
esNumerico <- function(x) is.numeric(x)
dataNumerica <- data[, sapply(data, esNumerico)]
deltaMDS <- 1 - cor(dataNumerica)

mds_1 <- cmdscale(deltaMDS, k = 2, eig = TRUE)
plot(mds_1$points, col='forestgreen', lwd=4, xlab= 'coord1', ylab = 'coord2', xlim = c(-1, 1), ylim = c(-0.5, 0.5))
text(mds_1$points, colnames(dataNumerica), pos = 2,  cex = 0.7)

plot(mds_1$eig, type = 'h', ylab = 'autovalores')

