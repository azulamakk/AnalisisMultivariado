winequality.red <- read.csv("~/Universidad/Analisis Multivariado/TP/winequality-red.csv")
library(tidyverse)
DS2 <- winequality.red %>%
filter(quality == 4 | quality == 6 | quality == 8) %>%
sample_n(500, replace = FALSE, weight = NULL) %>%
select("fixed.acidity", "density", "alcohol", "pH", "quality")
X <- DS2 %>%
select("fixed.acidity", "density", "alcohol", "pH") %>%
as.matrix
X
scale(X,center=TRUE, scale= FALSE)
mahala <- mahalanobis(X, colMeans(X), cov(X))
mahala
mahala <- mahalanobis(X, colMeans(X), cov(X))
View(data_frame(1:500,mahala))
mahala
winequality.red <- read.csv("~/Universidad/Analisis Multivariado/TP/winequality-red.csv")
library(tidyverse)
DS2 <- winequality.red %>%
filter(quality == 4 | quality == 6 | quality == 8) %>%
sample_n(500, replace = FALSE, weight = NULL) %>%
select("fixed.acidity", "density", "alcohol", "pH", "quality")
X <- DS2 %>%
select("fixed.acidity", "density", "alcohol", "pH") %>%
as.matrix
mahala <- mahalanobis(X, colMeans(X), cov(X))
View(data_frame(1:500,mahala))
winequality.red <- read.csv("~/Universidad/Analisis Multivariado/TP/winequality-red.csv")
library(tidyverse)
DS2 <- winequality.red %>%
filter(quality == 4 | quality == 6 | quality == 8) %>%
sample_n(500, replace = FALSE, weight = NULL) %>%
select("fixed.acidity", "density", "alcohol", "pH", "quality")
X <- DS2 %>%
select("fixed.acidity", "density", "alcohol", "pH") %>%
as.matrix
mahala <- mahalanobis(X, colMeans(X), cov(X))
distanciasMahala <- data_frame(1:500,mahala)
distanciasMahala <- distanciasMahala %>%
arrange(desc(mahala))
winequality.red <- read.csv("~/Universidad/Analisis Multivariado/TP/winequality-red.csv")
library(tidyverse)
DS2 <- winequality.red %>%
filter(quality == 4 | quality == 6 | quality == 8) %>%
sample_n(500, replace = FALSE, weight = NULL) %>%
select("fixed.acidity", "density", "alcohol", "pH", "quality")
X <- DS2 %>%
select("fixed.acidity", "density", "alcohol", "pH") %>%
as.matrix
mahala <- mahalanobis(X, colMeans(X), cov(X))
distanciasMahala <- data_frame(1:500,mahala)
distanciasMahala <- distanciasMahala %>%
arrange(desc(mahala))
mahala <- mahalanobis(X, colMeans(X), cov(X))
distanciasMahala <- tibble(Observation = 1:500, Mahalanobis = mahala)
distanciasMahala <- distanciasMahala %>%
arrange(desc(Mahalanobis))
View(distanciasMahala)
density(X)
datosVectorizados <- as.vector(X)
# Estimacion de funcion de densidad
datosVectorizados <- as.vector(X)
estimacionDensidad <- density(X)
estimacionDensidad
frecuenciasObservadas<- table(datosVectorizados)
gradosLibertad <- length(unique(datosVectorizados)) - 1
frecuenciasEsperadas <- dchisq(1:(length(unique(datosVectorizados)) - 1), df = gradosLibertad) * length(datosVectorizados)
chiCuadradoObs <- sum((frecuenciasObservadas - frecuenciasEsperadas)^2 / frecuenciasEsperadas)
p_value <- 1 - pchisq(chiCuadradoObs, df = gradosLibertad)
# Chi-Cuadrado
frecuenciasObservadas<- table(datosVectorizados)
gradosLibertad <- length(unique(datosVectorizados)) - 1
frecuenciasEsperadas <- dchisq(1:(length(unique(datosVectorizados)) - 1), df = gradosLibertad) * length(datosVectorizados)
if (length(frecuenciasObservadas) < length(frecuenciasEsperadas)) {
diff_length <- length(frecuenciasEsperadas) - length(frecuenciasObservadas)
frecuenciasObservadas <- c(frecuenciasObservadas, rep(0, diff_length))
}
chiCuadradoObs <- sum((frecuenciasObservadas - frecuenciasEsperadas)^2 / frecuenciasEsperadas)
p_value <- 1 - pchisq(chiCuadradoObs, df = gradosLibertad)
# Chi-Cuadrado
frecuenciasObservadas<- table(datosVectorizados)
gradosLibertad <- length(unique(datosVectorizados)) - 1
frecuenciasEsperadas <- dchisq(1:(length(unique(datosVectorizados)) - 1), df = gradosLibertad) * length(datosVectorizados)
if (length(frecuenciasObservadas) < length(frecuenciasEsperadas)) {
diff_length <- length(frecuenciasEsperadas) - length(frecuenciasObservadas)
frecuenciasObservadas <- c(frecuenciasObservadas, rep(0, diff_length))
}
chiCuadradoObs <- sum((frecuenciasObservadas - frecuenciasEsperadas)^2 / frecuenciasEsperadas)
p_value <- 1 - pchisq(chiCuadradoObs, df = gradosLibertad)
# Chi-Cuadrado
frecuenciasObservadas<- table(datosVectorizados)
gradosLibertad <- length(unique(datosVectorizados)) - 1
frecuenciasEsperadas <- dchisq(1:(length(unique(datosVectorizados)) - 1), df = gradosLibertad) * length(datosVectorizados)
if (length(frecuenciasObservadas) < length(frecuenciasEsperadas)) {
diff_length <- length(frecuenciasEsperadas) - length(frecuenciasObservadas)
frecuenciasObservadas <- c(frecuenciasObservadas, rep(0, diff_length))
}
chiCuadradoObs <- sum((frecuenciasObservadas - frecuenciasEsperadas)^2 / frecuenciasEsperadas)
p_value <- 1 - pchisq(chiCuadradoObs, df = gradosLibertad)
datosVectorizados <- as.vector(X)
estimacionDensidad <- density(X)
# Chi-Cuadrado
gradosLibertad <- length(valoresUnicos) - 1
valoresUnicos <- unique(datosVectorizados)
source("~/Universidad/Analisis Multivariado/TP/TP1.R", echo=TRUE)
datosVectorizados <- as.vector(X)
valoresUnicos <- unique(datosVectorizados)
estimacionDensidad <- density(X)
# Chi-Cuadrado
gradosLibertad <- length(valoresUnicos) - 1
valoresEsperados <- 1:(length(valoresUnicos) - 1)  # Valores esperados correspondientes
frecuenciasEsperadas <- dchisq(valoresEsperados, df = gradosLibertad) * length(datosVectorizados)
if (length(frecuenciasObservadas) < length(frecuenciasEsperadas)) {
diff_length <- length(frecuenciasEsperadas) - length(frecuenciasObservadas)
frecuenciasObservadas <- c(frecuenciasObservadas, rep(0, diff_length))
}
chiCuadradoObs <- sum((frecuenciasObservadas - frecuenciasEsperadas)^2 / frecuenciasEsperadas)
p_value <- 1 - pchisq(chiCuadradoObs, df = gradosLibertad)
cat("Estadística Chi-Cuadrado observada:", chiCuadradoObs, "\n")
cat("Valor p:", pValor, "\n")
pValor <- 1 - pchisq(chiCuadradoObs, df = gradosLibertad)
# Imprime los resultados
cat("Estadística Chi-Cuadrado observada:", chiCuadradoObs, "\n")
cat("Valor p:", pValor, "\n")
install.packages('car')
library(powerTransform)
library(car)
resultado <- powerTransform(X, family = "bcPower")
cat("Valor óptimo de lambda:", resultado$roundlam, "\n")
X_transformed <- predict(resultado, X)
result <- powerTransform(X, family = "bcPower")
lambda_optimo <- result$roundlam
X_transformed <- (X^lambda_optimo - 1) / lambda_optimo
X_transformed
distanciasMahala <- distanciasMahala %>%
arrange(desc(Mahalanobis))
ggplot(distanciasMahala, aes(x = Mahalanobis)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(
title = "Densidad de Distancias de Mahalanobis",
x = "Distancia de Mahalanobis",
y = "Densidad"
)
